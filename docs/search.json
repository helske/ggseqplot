[{"path":"https://maraab23.github.io/ggseqplot/articles/seq-summarization-plots.html","id":"setup-example","dir":"Articles","previous_headings":"","what":"Setup example","title":"Sequence Summarization Plots","text":"start loading required libraries defining sequence data plotted. draw examples {TraMineR} setting examples.     Note default figure size document specified : fig.width=8, fig.height=6","code":"# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Load and download (if necessary) required packages ---- # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   # Save package names as a vector of strings pkgs <- c(\"colorspace\", \"ggplot2\", \"ggthemes\", \"hrbrthemes\",            \"patchwork\", \"TraMineR\", \"TraMineRextras\")   # Install uninstalled packages lapply(pkgs[!(pkgs %in% installed.packages())],         install.packages, repos = getOption(\"repos\")[\"CRAN\"])   # Load all packages to library and adjust options lapply(pkgs, library, character.only = TRUE)  # Don't forget to load ggseqplot library(ggseqplot) # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Creating state sequence objects from example data sets ---- # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  # biofam data data(biofam)  biofam.lab <- c(\"Parent\", \"Left\", \"Married\", \"Left+Marr\",                 \"Child\", \"Left+Child\", \"Left+Marr+Child\", \"Divorced\")  biofam.seq <- seqdef(biofam, 10:25,                       labels = biofam.lab,                      weights = biofam$wp00tbgs)  ## actcal data data(actcal)  actcal.lab <- c(\"> 37 hours\", \"19-36 hours\", \"1-18 hours\", \"no work\")  actcal.seq <- seqdef(actcal,13:24,                      labels=actcal.lab)  ## ex1 data data(ex1) ex1.seq <- seqdef(ex1, 1:13,                    weights=ex1$weights)"},{"path":[]},{"path":"https://maraab23.github.io/ggseqplot/articles/seq-summarization-plots.html","id":"technicalities","dir":"Articles","previous_headings":"State distribution plots","what":"Technicalities","title":"Sequence Summarization Plots","text":"hood ggseqdplot calls TraMineR::seqstatd obtain cross-sectional state distributions across positions sequence data. distributional data reshaped long data set every row stores (weighted) relative frequency given state given position along sequence. example data actcal.seq, instance, contain sequences length 12 alphabet comprising 4 states. reshaped data serving source ggplot thus contain \\(12\\times4=48\\) rows. group vector specified, respective data comprise 48 rows group. data set produced ggseqdplot can accessed function’s output assigned object. resulting list object stores data first element (named data). data right shape ggseqdplot renders stacked bar charts sequence position using ggplot2::geom_bar.","code":"dplot <- ggseqdplot(actcal.seq) dplot$data #> # A tibble: 48 x 6 #>    group state      k     x     value grouplab            #>    <dbl> <fct>      <fct> <fct> <dbl> <glue>              #>  1     1 > 37 hours jan00 1     0.421 Rel. Freq. (n=2000) #>  2     1 > 37 hours feb00 2     0.420 Rel. Freq. (n=2000) #>  3     1 > 37 hours mar00 3     0.422 Rel. Freq. (n=2000) #>  4     1 > 37 hours apr00 4     0.418 Rel. Freq. (n=2000) #>  5     1 > 37 hours may00 5     0.420 Rel. Freq. (n=2000) #>  6     1 > 37 hours jun00 6     0.42  Rel. Freq. (n=2000) #>  7     1 > 37 hours jul00 7     0.422 Rel. Freq. (n=2000) #>  8     1 > 37 hours aug00 8     0.420 Rel. Freq. (n=2000) #>  9     1 > 37 hours sep00 9     0.418 Rel. Freq. (n=2000) #> 10     1 > 37 hours oct00 10    0.418 Rel. Freq. (n=2000) #> # ... with 38 more rows"},{"path":"https://maraab23.github.io/ggseqplot/articles/seq-summarization-plots.html","id":"baseline-comparison","dir":"Articles","previous_headings":"State distribution plots","what":"Baseline comparison","title":"Sequence Summarization Plots","text":"start basic version function simply plotting state distributions actcal.seq without changing defaults. Despite layout differences produce pretty similar results.   similarity prevails also add complexity visualizing state distributions gender.","code":"# TraMineR::seqplot seqdplot(actcal.seq) # ggseqplot::ggseqdplot ggseqdplot(actcal.seq) # TraMineR::seqplot seqdplot(actcal.seq, group=actcal$sex) # ggseqplot::ggseqdplot ggseqdplot(actcal.seq, group=actcal$sex)"},{"path":"https://maraab23.github.io/ggseqplot/articles/seq-summarization-plots.html","id":"utilizing-ggplot2-environment","dir":"Articles","previous_headings":"State distribution plots","what":"Utilizing ggplot2 environment","title":"Sequence Summarization Plots","text":"proceed illustrating {ggplot2} functions & extensions can used refine default outcome. Just like every {ggplot2} figure appearance plots generated ggseqplot functions can dramatically changed adjustments:  following example illustrate {ggplot2} functions & extensions composing figure comprising two plots produced ggseqdplot. visualize data first plot considers weights. addition state distributions plots display accompanying entropies line plot (geom_line). Finally, plots brought together using {patchwork} library (Pedersen, 2020).","code":"ggseqdplot(actcal.seq) +   scale_fill_discrete_sequential(\"heat\") +   scale_x_discrete(labels = month.abb) +   labs(title = \"State distribution plot\",        x = \"Month\") +   guides(fill=guide_legend(title=\"Alphabet\")) +   theme_ipsum(base_family = \"\") + # ensures that this works on different OS   theme(plot.title = element_text(size = 30,                                    margin=margin(0,0,20,0)),         plot.title.position = \"plot\") # Save plot using weights p1 <- ggseqdplot(ex1.seq,                   with.entropy = TRUE) +    ggtitle(\"Weighted data\")  # Save same plot without using weights p2 <- ggseqdplot(ex1.seq,                   with.entropy = TRUE,                  weighted = FALSE) +    ggtitle(\"Unweighted data\")  # Arrange and refine plots using patchwork p1 + p2 +    plot_layout(guides = \"collect\") &   scale_fill_manual(values= canva_palettes$`Fun and tropical`[1:4]) &   theme_ipsum(base_family = \"\") &   theme(plot.title = element_text(size = 20,                                   hjust = 0.5),         legend.position = \"bottom\",         legend.title = element_blank())"},{"path":"https://maraab23.github.io/ggseqplot/articles/seq-summarization-plots.html","id":"entropy-plots","dir":"Articles","previous_headings":"","what":"Entropy plots","title":"Sequence Summarization Plots","text":"… added soon","code":""},{"path":"https://maraab23.github.io/ggseqplot/articles/seq-summarization-plots.html","id":"modal-state-sequence-plots","dir":"Articles","previous_headings":"","what":"Modal state sequence plots","title":"Sequence Summarization Plots","text":"… added soon","code":""},{"path":[]},{"path":"https://maraab23.github.io/ggseqplot/articles/seq-summarization-plots.html","id":"technicalities-1","dir":"Articles","previous_headings":"Transition rate plots","what":"Technicalities","title":"Sequence Summarization Plots","text":"ggseqdplot calls TraMineR::seqtrate obtain transition rates states alphabet. TraMineR::seqtrate stores rates symmetrical matrix internally reshaped long format one row every combination states (.e., squared size sequence alphabet) ggseqdplot. reshaped data input ggplot call using geom_tile. data set produced ggseqtrplot can accessed function’s output assigned object. resulting list object stores data first element (named data)","code":""},{"path":"https://maraab23.github.io/ggseqplot/articles/seq-summarization-plots.html","id":"examples","dir":"Articles","previous_headings":"Transition rate plots","what":"Examples","title":"Sequence Summarization Plots","text":"start simple example takes sequence data group argument inputs. output faceted plot visualizing two transition rate matrices DSS sequence data.  second example specify additional arguments utilize patchwork library compose figure compares transition matrices sequence stored STS DSS format. use x_n.dodge = 2 prevent overlapping state labels x-axis, slightly reduce labels size value labels displayed within tiles, use dss = FALSE compute display transition rates STS sequences.  grouped version plot composed figure contains y-axis title labels twice. can changed small adjustments corresponding theme arguments.","code":"ggseqtrplot(actcal.seq,              group = actcal$sex) #>  [>] computing transition probabilities for states A/B/C/D ... #>  [>] computing transition probabilities for states A/B/C/D ... p1 <- ggseqtrplot(biofam.seq,                    dss = FALSE,                    x_n.dodge = 2,                   labsize = 3) +   ggtitle(\"STS Sequences\") +   theme(plot.margin = unit(c(5,10,5,5), \"points\")) #>  [>] computing transition probabilities for states 0/1/2/3/4/5/6/7 ...  p2 <- ggseqtrplot(biofam.seq,                    x_n.dodge = 2,                   labsize = 3) +     ggtitle(\"DSS Sequences\") +   theme(plot.margin = unit(c(5,5,5,10), \"points\")) #>  [>] computing transition probabilities for states 0/1/2/3/4/5/6/7 ...  p1 + p2 &   theme(plot.title = element_text(size = 20,                                   hjust = 0.5)) p2 <- p2 +   theme(axis.text.y = element_blank(),          axis.title.y = element_blank())  p1 + p2 &   theme(plot.title = element_text(size = 20,                                   hjust = 0.5))"},{"path":[]},{"path":"https://maraab23.github.io/ggseqplot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marcel Raab. Author, maintainer.","code":""},{"path":"https://maraab23.github.io/ggseqplot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Raab M (2022). ggseqplot: Render Sequence Plots using ggplot2. R package version 0.2.0, https://github.com/maraab23/ggseqplot.","code":"@Manual{,   title = {ggseqplot: Render Sequence Plots using ggplot2},   author = {Marcel Raab},   year = {2022},   note = {R package version 0.2.0},   url = {https://github.com/maraab23/ggseqplot}, }"},{"path":"https://maraab23.github.io/ggseqplot/CopyOfREADME.html","id":null,"dir":"","previous_headings":"","what":"ggseqplot: ggplotify sequence data plots\r\r\n","title":"ggseqplot: ggplotify sequence data plots\r\r\n","text":"Status main goal ggseqplot provide functions reproduce sequence plots TraMineR’s seqplot using ggplot2. plots produced basis sequence object defined TraMineR::seqdef. package automates reshaping plotting sequence data. package literally builds excellent work {TraMiner}, TraMineRextras, {ggplot2} developers uses several functions produce {ggplot2}-flavored figures. development library early stage hopefully complemented additional functions near future. Currently, ggseqplot contains four functions: ggseqiplot (ggplot2 version TraMineR::seqIplot) ggseqdplot (ggplot2 version TraMineR::seqdplot) ggseqeplot (ggplot2 version TraMineR::seqHtplot) ggseqrfplot (ggplot2 version TraMineRextras::seqplot.rf) preferences plot types added, create issue github send email.","code":""},{"path":"https://maraab23.github.io/ggseqplot/CopyOfREADME.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"ggseqplot: ggplotify sequence data plots\r\r\n","text":"can install early version ggseqplot typing:","code":"devtools::install_github(\"maraab23/ggseqplot\")"},{"path":"https://maraab23.github.io/ggseqplot/CopyOfREADME.html","id":"setup-for-examples","dir":"","previous_headings":"","what":"Setup for examples","title":"ggseqplot: ggplotify sequence data plots\r\r\n","text":"start defining sequence objects TraMineR::seqdef using code example section documentation. following sections use sequence objects render “” sequence plots TraMineR::seqplot corresponding ggseqplot functions using specification plot width height (7x5 inches).","code":"library(TraMineR) library(TraMineRextras) library(ggseqplot) library(ggplot2) library(patchwork)  # Examples from TraMineR data(actcal) data(biofam)  # We use only a samples of 1000 cases set.seed(1) actcal <- actcal[sample(nrow(actcal),1000),] actcal.lab <- c(\"> 37 hours\", \"19-36 hours\", \"1-18 hours\", \"no work\") actcal.seq <- seqdef(actcal,13:24,labels=actcal.lab)  set.seed(1) biofam <- biofam[sample(nrow(biofam),1000),] biofam.lab <- c(\"Parent\", \"Left\", \"Married\", \"Left+Marr\",                 \"Child\", \"Left+Child\", \"Left+Marr+Child\", \"Divorced\") biofam.seq <- seqdef(biofam, 10:25, labels=biofam.lab)   # ex1 using weights data(ex1) ex1.seq <- seqdef(ex1, 1:13, weights=ex1$weights)"},{"path":"https://maraab23.github.io/ggseqplot/CopyOfREADME.html","id":"sequence-index-plot","dir":"","previous_headings":"","what":"Sequence index plot","title":"ggseqplot: ggplotify sequence data plots\r\r\n","text":"start sequence plot 1000 sequences grouped sex. Grouping ggseqplot-functions achieved via ggplot2::facet_wrap.   Note recommend abstain using regular sequence index plots rendering 300-500 sequences well-known issue overplotting. code just replicates example seqplot documentation. real world applications recommend rather render subsample sequences use relative frequency index plots. second example renders sequences unequal length missing state, weights. default behavior ggseqplot identical seqplot: weights specified defining sequence object seqdef, automatically used. sequences contain missing states automatically added alphabet also plotted.   course, possible change default behavior using well-known arguments TraMineR’s seqplot function. following example ignore weights add add borders around sequence position:   haven’t notice differences aspect ratio used seqplot {ggseqplot} earlier, probably done now. Whereas little boxes displayed rectangles landscape mode TraMineR’s seqIplot appear rectangles portrait mode using ggseqiplot. Within world ggplot2 multiple options mimic behavior seqplot, instance specifying height width arguments saving figure ggsave:","code":"# with TraMineR::seqIplot seqIplot(actcal.seq, group=actcal$sex,sortv=actcal$age00) # with ggseqplot::ggseqiplot ggseqiplot(actcal.seq, group=actcal$sex, sortv=actcal$age00) # with TraMineR::seqIplot seqIplot(ex1.seq) # with ggseqplot::ggseqiplot ggseqiplot(ex1.seq) # with TraMineR::seqIplot seqIplot(ex1.seq, weighted = FALSE, border = TRUE) # with ggseqplot::ggseqiplot ggseqiplot(ex1.seq, weighted = FALSE, border = TRUE) ggsave(\"test.png\", width = 10, height = 4)"},{"path":"https://maraab23.github.io/ggseqplot/CopyOfREADME.html","id":"relative-frequency-sequence-plot","dir":"","previous_headings":"","what":"Relative frequency sequence plot","title":"ggseqplot: ggplotify sequence data plots\r\r\n","text":"following examples divide sample 1000 sequences 20 frequency group display resulting relative frequency sequence plots. first compute dissimilarity matrix:","code":"diss <- seqdist(biofam.seq, method=\"LCS\") #>  [>] 1000 sequences with 8 distinct states #>  [>] creating a 'sm' with a substitution cost of 2 #>  [>] creating 8x8 substitution-cost matrix using 2 as constant value #>  [>] 356 distinct  sequences #>  [>] min/max sequence lengths: 16/16 #>  [>] computing distances using the LCS metric #>  [>] elapsed time: 0.07 secs # with TraMineRextras::seqplot.rf seqplot.rf(biofam.seq, diss = diss, k = 20) #>  [>] Using k=20 frequency groups #>  [>] Pseudo/median-based-R2: 0.5319843 #>  [>] Pseudo/median-based-F statistic: 58.62879 # with ggseqplot::ggseqdplot ggseqrfplot(biofam.seq, diss = diss, k = 20) #>  [>] Using k=20 frequency groups #>  [>] Pseudo/median-based-R2: 0.5319843 #>  [>] Pseudo/median-based-F statistic: 58.62879"},{"path":"https://maraab23.github.io/ggseqplot/CopyOfREADME.html","id":"sequence-distribution-plot","dir":"","previous_headings":"","what":"Sequence distribution plot","title":"ggseqplot: ggplotify sequence data plots\r\r\n","text":"following examples show plots grouped sex, time presenting state distributions.","code":"# with TraMineR::seqdplot seqdplot(actcal.seq, group=actcal$sex) # with ggseqplot::ggseqdplot ggseqdplot(actcal.seq, group=actcal$sex)"},{"path":"https://maraab23.github.io/ggseqplot/CopyOfREADME.html","id":"plot-of-development-of-cross-sectional-entropies","dir":"","previous_headings":"","what":"Plot of development of cross-sectional entropies","title":"ggseqplot: ggplotify sequence data plots\r\r\n","text":"Like previous examples, illustrate group argument {TraMiner} ggseqplot. Just figures shown TraMineR::seqHtplot produces separate plot group. ggseqeplot behaves differently shows group-specific entropy line common plot thus resembles new TraMineRextras function seqplot.tentrop.","code":"# with TraMineR::seqHtplot seqHtplot(actcal.seq, group=actcal$sex) # with ggseqplot::ggseqeplot ggseqeplot(actcal.seq, group=actcal$sex)"},{"path":"https://maraab23.github.io/ggseqplot/CopyOfREADME.html","id":"using-ggplot2-functions-and-its-friends-to-adjust-figures","dir":"","previous_headings":"","what":"Using {ggplot2} functions and its friends to adjust figures","title":"ggseqplot: ggplotify sequence data plots\r\r\n","text":"Rendering figures using ggplot2 ggseqplot plots can easily manipulated functions usually used adjust ggplot2 output. also can utilize libraries designed used together ggplot2:","code":"library(ggplot2) library(ggthemes) library(hrbrthemes)  ggseqdplot(actcal.seq) +   colorspace::scale_fill_discrete_sequential(\"heat\") +   scale_x_discrete(labels = month.abb) +   labs(title = \"State distribution plot\",        x = \"Month\") +   guides(fill=guide_legend(title=\"Alphabet\")) +   hrbrthemes::theme_ipsum_rc() +   theme(plot.title = element_text(size = 30,                                    margin=margin(0,0,20,0)),         plot.title.position = \"plot\")"},{"path":"https://maraab23.github.io/ggseqplot/index.html","id":"ggseqplot-ggplotify-sequence-data-plots-","dir":"","previous_headings":"","what":"Render Sequence Plots using ggplot2","title":"Render Sequence Plots using ggplot2","text":"main goal ggseqplot provide functions reproduce sequence plots {TraMineR}’s seqplot using {ggplot2}. plots produced basis sequence object defined TraMineR::seqdef. package automates reshaping plotting sequence data. set wrapper functions library literally builds excellent work {TraMineR}, {TraMineRExtras}, {ggplot2} developers uses several functions produce ggplot2-flavored figures. Note, library written personally dislike plots produced {TraMineR}, rather normally using {ggplot2} instead base R’s plot environment visualizing data. {TraMineR} developed {ggplot2} popular today back many users familiar coding base R plots. date, however, many researchers students accustomed using {ggplot2} prefer draw related skills experiences instead learning refine base R plots just single purpose visualizing sequence data. development library early stage hopefully complemented additional functions near future. Currently, ggseqplot contains following functions: ggseqdplot (equivalent TraMineR::seqdplot) ggseqeplot (equivalent TraMineRextras::seqplot.tentrop) ggseqmsplot (equivalent TraMineR::seqmsplot) ggstrqeplot (based transitions rates computed TraMineR::seqtrate) ggseqiplot (equivalent TraMineR::seqIplot) ggseqrfplot (equivalent TraMineRextras::seqplot.rf) documentation (including vignettes) still much work progress. working , likely existing functions slightly revised extended. preferences plot types added, create issue github send email. Two vignettes outlines ggseqplot reshapes sequence data generated TraMineR::seqdef visualize using {ggplot2}. compare resulting plots produced {TraMineR} illustrate adjust baseline output using familiar {ggplot2} functions (add ons).","code":""},{"path":"https://maraab23.github.io/ggseqplot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Render Sequence Plots using ggplot2","text":"can install ggseqplot typing:","code":"devtools::install_github(\"maraab23/ggseqplot\")"},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://maraab23.github.io/ggseqplot/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqdplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence Distribution Plot — ggseqdplot","title":"Sequence Distribution Plot — ggseqdplot","text":"Function rendering state distribution plots ggplot2 instead base R's plot function used TraMineR::seqplot.","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqdplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence Distribution Plot — ggseqdplot","text":"","code":"ggseqdplot(   seqdata,   no.n = FALSE,   group = NULL,   weighted = TRUE,   with.missing = FALSE,   border = TRUE,   with.entropy = FALSE,   linetype = \"dashed\",   linecolor = \"black\",   linewidth = 1,   facet_ncol = NULL,   facet_nrow = NULL )"},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqdplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence Distribution Plot — ggseqdplot","text":"seqdata State sequence object (class stslist) created TraMineR::seqdef function. .n specifies number (weighted) sequences shown (default TRUE) group Grouping variable length equal number sequences. NULL, distinct plot generated level group. weighted Controls weights (specified TraMineR::seqdef) used. Default TRUE, .e. available weights used .missing Specifies missing states considered computing state distributions (default FALSE). border TRUE (default) bars plotted black outline .entropy add line plot cross-sectional entropies sequence position linetype linetype entropy subplot (.entropy==TRUE) can specified integer (0-6) name (0 = blank, 1 = solid, 2 = dashed, 3 = dotted, 4 = dotdash, 5 = longdash, 6 = twodash); ; default \"dashed\" linecolor Specifies color entropy line .entropy==TRUE; default \"black\" linewidth Specifies entropy line .entropy==TRUE; default 1 facet_ncol Number columns faceted (.e. grouped) plot facet_nrow Number rows faceted (.e. grouped) plot","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqdplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence Distribution Plot — ggseqdplot","text":"sequence distribution plot. stored object resulting list object also contains data (long format) used rendering plot","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqdplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequence Distribution Plot — ggseqdplot","text":"function uses TraMineR::seqstatd obtain state distributions. Obviously requires input data (seqdata) stored state sequence object (class stslist) created TraMineR::seqdef function.","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqdplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence Distribution Plot — ggseqdplot","text":"","code":"# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  # Examples from TraMineR::seqplot  library(TraMineR) #>  #> TraMineR stable version 2.2-3 (Built: 2022-03-25) #> Website: http://traminer.unige.ch #> Please type 'citation(\"TraMineR\")' for citation information. library(ggplot2)  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  # Examples from TraMineR::seqplot  # actcal data set data(actcal)  # We use only a sample of 300 cases set.seed(1) actcal <- actcal[sample(nrow(actcal), 300), ] actcal.lab <- c(\"> 37 hours\", \"19-36 hours\", \"1-18 hours\", \"no work\") actcal.seq <- seqdef(actcal, 13:24, labels = actcal.lab) #>  [>] 4 distinct states appear in the data:  #>      1 = A #>      2 = B #>      3 = C #>      4 = D #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  A           A        > 37 hours #>      2  B           B        19-36 hours #>      3  C           C        1-18 hours #>      4  D           D        no work #>  [>] 300 sequences in the data set #>  [>] min/max sequence length: 12/12  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  # state distribution plots; grouped by sex # with TraMineR::seqplot seqdplot(actcal.seq, group = actcal$sex)  # with ggseqplot ggseqdplot(actcal.seq, group = actcal$sex)  # with ggseqplot and weights turned off ggseqdplot(actcal.seq, group = actcal$sex, weighted = FALSE)   # make use of ggplot functions for modifying the plot ggseqdplot(actcal.seq) +   scale_x_discrete(labels = month.abb) +   labs(     title = \"State distribution plot\",     x = \"Month\"   ) +   guides(fill = guide_legend(title = \"Alphabet\")) +   theme_classic() +   theme(     plot.title = element_text(       size = 30,       margin = margin(0, 0, 20, 0)     ),     plot.title.position = \"plot\"   ) #> Scale for 'x' is already present. Adding another scale for 'x', which will #> replace the existing scale."},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqeplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence Entropy Plot — ggseqeplot","title":"Sequence Entropy Plot — ggseqeplot","text":"Function plotting development cross-sectional entropies across sequence positions ggplot2 instead base R's plot function used TraMineR::seqplot. TraMineR::seqHtplot group-specific entropy lines displayed common plot (just like TraMineRextras::seqplot.tentrop.","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqeplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence Entropy Plot — ggseqeplot","text":"","code":"ggseqeplot(   seqdata,   group = NULL,   weighted = TRUE,   with.missing = FALSE,   linewidth = 1 )"},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqeplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence Entropy Plot — ggseqeplot","text":"seqdata State sequence object (class stslist) created TraMineR::seqdef function. group grouping variable specified plot shows one line group weighted Controls weights (specified \\code\\link[TraMineR:seqdef]TraMineR::seqdef) used. Default TRUE, .e. available weights used .missing Specifies missing states considered computing entropy index (default FALSE). linewidth Specifies entropy line; default 1","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqeplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence Entropy Plot — ggseqeplot","text":"line plot entropy values sequence position. stored object resulting list object also contains data (long format) used rendering plot","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqeplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequence Entropy Plot — ggseqeplot","text":"function uses TraMineR::seqstatd compute entropies. Obviously requires input data (seqdata) stored state sequence object (class stslist) created TraMineR::seqdef function.","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqeplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence Entropy Plot — ggseqeplot","text":"","code":"# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  # Examples from TraMineR::seqplot  library(TraMineR) library(ggplot2)  # actcal data set data(actcal)  # We use only a sample of 300 cases set.seed(1) actcal <- actcal[sample(nrow(actcal), 300), ] actcal.lab <- c(\"> 37 hours\", \"19-36 hours\", \"1-18 hours\", \"no work\") actcal.seq <- seqdef(actcal, 13:24, labels = actcal.lab) #>  [>] 4 distinct states appear in the data:  #>      1 = A #>      2 = B #>      3 = C #>      4 = D #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  A           A        > 37 hours #>      2  B           B        19-36 hours #>      3  C           C        1-18 hours #>      4  D           D        no work #>  [>] 300 sequences in the data set #>  [>] min/max sequence length: 12/12  # ex1 using weights data(ex1) ex1.seq <- seqdef(ex1, 1:13, weights = ex1$weights) #>  [>] found missing values ('NA') in sequence data #>  [>] preparing 7 sequences #>  [>] coding void elements with '%' and missing values with '*' #>  [!!] 1 empty sequence(s) with index: 7 #>       may produce inconsistent results. #>  [>] 4 distinct states appear in the data:  #>      1 = A #>      2 = B #>      3 = C #>      4 = D #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  A           A        A #>      2  B           B        B #>      3  C           C        C #>      4  D           D        D #>  [>] sum of weights: 60 - min/max: 0/29.3 #>  [>] 7 sequences in the data set #>  [>] min/max sequence length: 0/13  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   # sequences sorted by age in 2000 and grouped by sex # with TraMineR::seqplot (entropies shown in two separate plots) seqHtplot(actcal.seq, group = actcal$sex)  # with ggseqplot (entropies shown in one plot) ggseqeplot(actcal.seq, group = actcal$sex)   # sequences of unequal length with missing state, and weights seqHtplot(ex1.seq)  ggseqeplot(ex1.seq)"},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqiplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence Index Plot — ggseqiplot","title":"Sequence Index Plot — ggseqiplot","text":"Function rendering sequence index plots ggplot2 (Wickham 2016)  instead base R's plot function used TraMineR::seqplot (Gabadinho et al. 2011) .","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqiplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence Index Plot — ggseqiplot","text":"","code":"ggseqiplot(   seqdata,   no.n = FALSE,   group = NULL,   sortv = NULL,   weighted = TRUE,   border = FALSE,   facet_scale = \"free_y\",   facet_ncol = NULL,   facet_nrow = NULL )"},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqiplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence Index Plot — ggseqiplot","text":"seqdata State sequence object (class stslist) created TraMineR::seqdef function. .n specifies number (weighted) sequences shown (default TRUE) group Grouping variable length equal number sequences. NULL, distinct plot generated level group. sortv Vector numerical values sorting sequences sorting method (either \".start\" \".end\"). See details. weighted Controls weights (specified TraMineR::seqdef) used. Default TRUE, .e. available weights used border TRUE bars plotted black outline facet_scale Specifies y-scale faceted plot free (\"free_y\" default) \"fixed\" facet_ncol Number columns faceted (.e. grouped) plot facet_nrow Number rows faceted (.e. grouped) plot","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqiplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence Index Plot — ggseqiplot","text":"sequence index plot. stored object resulting list object also contains data (spell format) used rendering plot.","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqiplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequence Index Plot — ggseqiplot","text":"Sequence index plots introduced Scherer (2001)  display sequence horizontally stacked bar line. detailes discussion tpye sequence visualisation see, example, Brzinsky-Fay (2014) , Fasang Liao (2014) , Raab Struffolino (2022) . function uses TraMineR::seqformat reshape seqdata stored wide format spell/episode format. border=TRUE data reshaped long format, .e. every sequence row data represents one specific sequence position. example, 5 sequences length 10, long file 50 rows. case sequences unequal length every sequence contribute number rows long data. reshaped data used input rendering index plot using ggplot2's geom_rect. ggseqiplot uses geom_rect instead geom_tile allows straight forward implementation weights. weights specified seqdata weighted=TRUE sequence height corresponds weight. weights grouping variable used, facet_scale=\"fixed\" values y-axis labeled, ggplot2 reasonably allow varying scales facet scale fixed. sortv specified, sequences arranged order values. sortv=\".start\" sequence data sorted according states alphabet ascending order starting first sequence position, drawing succeeding positions case ties. Likewise, sortv=\".end\" sorts reversed version sequence data, starting final sequence position turning preceding positions case ties. Note default aspect ratio ggseqiplot different TraMineR::seqIplot. obvious border=TRUE. can change ratio either adding code ggseqiplot specifying ratio saving code ggsave.","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqiplot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sequence Index Plot — ggseqiplot","text":"Brzinsky-Fay C (2014). “Graphical Representation Transitions Sequences.” Blanchard P, B昼㹣hlmann F, Gauthier J (eds.), Advances Sequence Analysis: Theory, Method, Applications,  Life Course Research Social Policies, 265--284. Springer, Cham. doi: 10.1007/978-3-319-04969-4_14 . Fasang AE, Liao TF (2014). “Visualizing Sequences Social Sciences: Relative Frequency Sequence Plots.” Sociological Methods \\& Research, 43(4), 643--676. doi: 10.1177/0049124113506563 . Gabadinho , Ritschard G, M昼㹣ller NS, Studer M (2011). “Analyzing Visualizing State Sequences R TraMineR.” Journal Statistical Software, 40(4), 1--37. doi: 10.18637/jss.v040.i04 . Raab M, Struffolino E (2022). Sequence Analysis, volume 190 Quantitative Applications Social Sciences. SAGE, Thousand Oaks, CA. Scherer S (2001). “Early Career Patterns: Comparison Great Britain West Germany.” European Sociological Review, 17(2), 119--144. doi: 10.1093/esr/17.2.119 . Wickham H (2016). Ggplot2: Elegant Graphics Data Analysis,  Use R!, 2nd ed. 2016 edition. Springer, Cham. ISBN 978-3-319-24277-4, doi: 10.1007/978-3-319-24277-4 .","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqiplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sequence Index Plot — ggseqiplot","text":"Marcel Raab","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqiplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence Index Plot — ggseqiplot","text":"","code":"# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  # Examples from TraMineR::seqplot  library(TraMineR)  # actcal data set data(actcal)  # We use only a sample of 300 cases set.seed(1) actcal <- actcal[sample(nrow(actcal), 300), ] actcal.lab <- c(\"> 37 hours\", \"19-36 hours\", \"1-18 hours\", \"no work\") actcal.seq <- seqdef(actcal, 13:24, labels = actcal.lab) #>  [>] 4 distinct states appear in the data:  #>      1 = A #>      2 = B #>      3 = C #>      4 = D #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  A           A        > 37 hours #>      2  B           B        19-36 hours #>      3  C           C        1-18 hours #>      4  D           D        no work #>  [>] 300 sequences in the data set #>  [>] min/max sequence length: 12/12  # ex1 using weights data(ex1) ex1.seq <- seqdef(ex1, 1:13, weights = ex1$weights) #>  [>] found missing values ('NA') in sequence data #>  [>] preparing 7 sequences #>  [>] coding void elements with '%' and missing values with '*' #>  [!!] 1 empty sequence(s) with index: 7 #>       may produce inconsistent results. #>  [>] 4 distinct states appear in the data:  #>      1 = A #>      2 = B #>      3 = C #>      4 = D #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  A           A        A #>      2  B           B        B #>      3  C           C        C #>      4  D           D        D #>  [>] sum of weights: 60 - min/max: 0/29.3 #>  [>] 7 sequences in the data set #>  [>] min/max sequence length: 0/13  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   # sequences sorted by age in 2000 and grouped by sex # with TraMineR::seqplot seqIplot(actcal.seq, group = actcal$sex, sortv = actcal$age00)  # with ggseqplot ggseqiplot(actcal.seq, group = actcal$sex, sortv = actcal$age00)   # sequences of unequal length with missing state, and weights seqIplot(ex1.seq)  ggseqiplot(ex1.seq)   # ... turn weights off and add border seqIplot(ex1.seq, weighted = FALSE, border = TRUE)  ggseqiplot(ex1.seq, weighted = FALSE, border = TRUE)"},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqmsplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Modal State Sequence Plot — ggseqmsplot","title":"Modal State Sequence Plot — ggseqmsplot","text":"Function rendering modal state sequence plot ggplot2 instead base R's plot function used TraMineR::seqplot.","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqmsplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modal State Sequence Plot — ggseqmsplot","text":"","code":"ggseqmsplot(   seqdata,   no.n = FALSE,   group = NULL,   weighted = TRUE,   with.missing = FALSE,   border = TRUE,   facet_ncol = NULL,   facet_nrow = NULL )"},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqmsplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modal State Sequence Plot — ggseqmsplot","text":"seqdata State sequence object (class stslist) created TraMineR::seqdef function. .n specifies number (weighted) sequences shown (default TRUE) group Grouping variable length equal number sequences. NULL, distinct plot generated level group. weighted Controls weights (specified TraMineR::seqdef) used. Default TRUE, .e. available weights used .missing Specifies missing states considered computing state distributions (default FALSE). border TRUE (default) bars plotted black outline facet_ncol Number columns faceted (.e. grouped) plot facet_nrow Number rows faceted (.e. grouped) plot","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqmsplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modal State Sequence Plot — ggseqmsplot","text":"modal state sequence plot. stored object resulting list object also contains data (long format) used rendering plot","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqmsplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modal State Sequence Plot — ggseqmsplot","text":"function uses TraMineR::seqstatd obtain modal states prevalence. Obviously, requires input data (seqdata) stored state sequence object (class stslist) created TraMineR::seqdef function.","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqmsplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modal State Sequence Plot — ggseqmsplot","text":"","code":"# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  # Examples from TraMineR::seqplot  library(TraMineR) library(ggplot2)  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  # Examples from TraMineR::seqplot  # actcal data set data(actcal)  # We use only a sample of 300 cases set.seed(1) actcal <- actcal[sample(nrow(actcal), 300), ] actcal.lab <- c(\"> 37 hours\", \"19-36 hours\", \"1-18 hours\", \"no work\") actcal.seq <- seqdef(actcal, 13:24, labels = actcal.lab) #>  [>] 4 distinct states appear in the data:  #>      1 = A #>      2 = B #>      3 = C #>      4 = D #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  A           A        > 37 hours #>      2  B           B        19-36 hours #>      3  C           C        1-18 hours #>      4  D           D        no work #>  [>] 300 sequences in the data set #>  [>] min/max sequence length: 12/12  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  # modal state sequence plot; grouped by sex # with TraMineR::seqplot seqmsplot(actcal.seq, group = actcal$sex)  # with ggseqplot ggseqmsplot(actcal.seq, group = actcal$sex)  # with ggseqplot and some layout changes ggseqdplot(actcal.seq, group = actcal$sex, no.n = TRUE, border = FALSE, facet_nrow = 2)"},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqplot-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggseqplot: Render Sequence Plots using ggplot2 — ggseqplot-package","title":"ggseqplot: Render Sequence Plots using ggplot2 — ggseqplot-package","text":"library provides set wrapper functions reproduce sequence plots TraMineR's seqplot using ggplot2. plots produced basis sequence object defined TraMineR::seqdef. package automates reshaping plotting sequence data. Resulting plots class \"ggplot\", .e. components can added tweaked using `+` regular ggplot2 functions.  library provides set wrapper functions reproduce sequence plots TraMineR's seqplot using ggplot2. plots produced basis sequence object defined TraMineR::seqdef. package automates reshaping plotting sequence data. Resulting plots class \"ggplot\", .e. components can added tweaked using `+` regular ggplot2 functions.","code":""},{"path":[]},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqplot-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggseqplot: Render Sequence Plots using ggplot2 — ggseqplot-package","text":"Maintainer: Marcel Raab marcel.raab@gmail.com (ORCID) Maintainer: Marcel Raab marcel.raab@gmail.com (ORCID)","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqrfplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative Frequency Sequence Plot — ggseqrfplot","title":"Relative Frequency Sequence Plot — ggseqrfplot","text":"Function rendering sequence index plots ggplot2 instead base R's plot function used TraMineRextras::seqplot.rf. Note ggseqrfplot uses patchwork combine different components plot. details relative frequency sequence plots see documentation TraMineRextras::seqplot.rf.","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqrfplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Frequency Sequence Plot — ggseqrfplot","text":"","code":"ggseqrfplot(   seqdata,   k = floor(nrow(seqdata)/10),   diss,   sortv = NULL,   ylab = NULL,   yaxis = TRUE,   box.color = NULL,   box.fill = NULL,   box.alpha = NULL,   which.plot = \"both\",   quality = TRUE )"},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqrfplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Frequency Sequence Plot — ggseqrfplot","text":"seqdata State sequence object (class stslist) created TraMineR::seqdef function. k integer specifying number frequency groups diss pairwise dissimilarities sequences seqdata (see TraMineRextras::seqdist) sortv optional sorting variable may used compute frequency groups.  NULL (default), MDS used. Ties randomly ordered. ylab character string specifying title y-axis. NULL axis title \"Frequency group\" yaxis Controls y-axis plotted. set TRUE, index frequency groups displayed. box.color specifies color boxplot borders; default \"black box.fill specifies fill color boxplots; default \"white\" box.alpha specifies alpha value boxplot fill color; default 1 .plot character string specifying components relative frequency sequence plot displayed. Default \"\". set \"medoids\" index plot medoids shown. \"diss..med\" box plots group-specific distances medoids shown. quality specifies representation quality shown figure caption; default TRUE","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqrfplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relative Frequency Sequence Plot — ggseqrfplot","text":"relative sequence index plot using ggplot.","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqrfplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relative Frequency Sequence Plot — ggseqrfplot","text":"Note identical function call might produce different results sortv ties, sequences sorted randomly within set ties (see rank; ties.method=\"random\")","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqrfplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relative Frequency Sequence Plot — ggseqrfplot","text":"","code":"## From TraMineRextras::seqplot.rf library(TraMineR) library(TraMineRextras) #> TraMineRextras stable version 0.6.3 (Built: 2022-03-25) #> Functions provided by this package are still in test #>     and subject to changes in future releases. library(patchwork) library(ggplot2)  ## Defining a sequence object with the data in columns 10 to 25 ## (family status from age 15 to 30) in the biofam data set data(biofam) biofam.lab <- c(\"Parent\", \"Left\", \"Married\", \"Left+Marr\",   \"Child\", \"Left+Child\", \"Left+Marr+Child\", \"Divorced\")  ## Here, we use only 100 cases selected such that all elements ## of the alphabet be present. ## (More cases and a larger k would be necessary to get a meaningful example.) biofam.seq <- seqdef(biofam[501:600, ], 10:25, labels = biofam.lab) #>  [>] 8 distinct states appear in the data:  #>      1 = 0 #>      2 = 1 #>      3 = 2 #>      4 = 3 #>      5 = 4 #>      6 = 5 #>      7 = 6 #>      8 = 7 #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  0           0        Parent #>      2  1           1        Left #>      3  2           2        Married #>      4  3           3        Left+Marr #>      5  4           4        Child #>      6  5           5        Left+Child #>      7  6           6        Left+Marr+Child #>      8  7           7        Divorced #>  [>] 100 sequences in the data set #>  [>] min/max sequence length: 16/16 diss <- seqdist(biofam.seq, method = \"LCS\") #>  [>] 100 sequences with 8 distinct states #>  [>] creating a 'sm' with a substitution cost of 2 #>  [>] creating 8x8 substitution-cost matrix using 2 as constant value #>  [>] 76 distinct  sequences  #>  [>] min/max sequence lengths: 16/16 #>  [>] computing distances using the LCS metric #>  [>] elapsed time: 0.01 secs   ## Using 12 groups and default MDS sorting ## ... with TraMineRextras::seqplot.rf seqplot.rf(biofam.seq, diss = diss, k = 12) #>  [>] Using k=12 frequency groups #>  [>] Pseudo/median-based-R2: 0.5391125 #>  [>] Pseudo/median-based-F statistic: 9.357815   ## ... with ggseqrfplot ggseqrfplot(biofam.seq, diss = diss, k = 12) #>  [>] Using k=12 frequency groups #>  [>] Pseudo/median-based-R2: 0.5391125 #>  [>] Pseudo/median-based-F statistic: 9.357815    ## With a user specified sorting variable ## Here time spent in parental home parentTime <- seqistatd(biofam.seq)[, 1] #>  [>] computing state distribution for 100 sequences ...  ## ... with TraMineRextras::seqplot.rf set.seed(123) seqplot.rf(biofam.seq, diss = diss, k = 12,   sortv = parentTime, main = \"Sorted by parent time\") #>  [>] Using k=12 frequency groups #>  [>] Pseudo/median-based-R2: 0.4745098 #>  [>] Pseudo/median-based-F statistic: 7.223881   ## ... with ggseqrfplot set.seed(123) ggseqrfplot(biofam.seq, diss = diss, k = 12, sortv = parentTime) +   plot_annotation(title = \"Sorted by parent time\",      theme = theme(plot.title = element_text(hjust = 0.5, size = 18))) #>  [>] Using k=12 frequency groups #>  [>] Pseudo/median-based-R2: 0.4745098 #>  [>] Pseudo/median-based-F statistic: 7.223881"},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqtrplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence Transition Rate Plot — ggseqtrplot","title":"Sequence Transition Rate Plot — ggseqtrplot","text":"Function plotting transition rate matrix sequence states internally computed TraMineR::seqtrate (Gabadinho et al. 2011) . Plot generated using ggplot2 (Wickham 2016) .","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqtrplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence Transition Rate Plot — ggseqtrplot","text":"","code":"ggseqtrplot(   seqdata,   dss = TRUE,   group = NULL,   no.n = FALSE,   weighted = TRUE,   with.missing = FALSE,   labsize = NULL,   axislabs = \"labels\",   x_n.dodge = 1,   facet_ncol = NULL,   facet_nrow = NULL )"},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqtrplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence Transition Rate Plot — ggseqtrplot","text":"seqdata State sequence object (class stslist) created TraMineR::seqdef function. dss specifies transition rates computed STS DSS (default) sequences group Grouping variable length equal number sequences. NULL, distinct plot generated level group. .n specifies number (weighted) sequences shown grouped (faceted) graph weighted Controls weights (specified TraMineR::seqdef) used. Default TRUE, .e. available weights used .missing Specifies missing state considered computing transition rates (default FALSE). labsize Specifies font size labels within tiles (specified ggplot2's default used) axislabs specifies sequence object's long labels (default) state names alphabet attribute used. x_n.dodge allows print labels x-axis multiple rows avoid overlapping. facet_ncol Number columns faceted (.e. grouped) plot facet_nrow Number rows faceted (.e. grouped) plot","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqtrplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence Transition Rate Plot — ggseqtrplot","text":"tile plot transition rates.","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqtrplot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sequence Transition Rate Plot — ggseqtrplot","text":"Gabadinho , Ritschard G, M昼㹣ller NS, Studer M (2011). “Analyzing Visualizing State Sequences R TraMineR.” Journal Statistical Software, 40(4), 1--37. doi: 10.18637/jss.v040.i04 . Wickham H (2016). Ggplot2: Elegant Graphics Data Analysis,  Use R!, 2nd ed. 2016 edition. Springer, Cham. ISBN 978-3-319-24277-4, doi: 10.1007/978-3-319-24277-4 .","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqtrplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sequence Transition Rate Plot — ggseqtrplot","text":"Marcel Raab","code":""},{"path":"https://maraab23.github.io/ggseqplot/reference/ggseqtrplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence Transition Rate Plot — ggseqtrplot","text":"","code":"# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  # Examples from TraMineR::seqplot  library(TraMineR)  # biofam data set data(biofam) # We use only a sample of 300 cases set.seed(10) biofam <- biofam[sample(nrow(biofam),300),] biofam.lab <- c(\"Parent\", \"Left\", \"Married\", \"Left+Marr\",                 \"Child\", \"Left+Child\", \"Left+Marr+Child\", \"Divorced\") biofam.seq <- seqdef(biofam, 10:25, labels=biofam.lab, weights = biofam$wp00tbgs) #>  [>] 8 distinct states appear in the data:  #>      1 = 0 #>      2 = 1 #>      3 = 2 #>      4 = 3 #>      5 = 4 #>      6 = 5 #>      7 = 6 #>      8 = 7 #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  0           0        Parent #>      2  1           1        Left #>      3  2           2        Married #>      4  3           3        Left+Marr #>      5  4           4        Child #>      6  5           5        Left+Child #>      7  6           6        Left+Marr+Child #>      8  7           7        Divorced #>  [>] sum of weights: 330.07 - min/max: 0/6.02881860733032 #>  [>] 300 sequences in the data set #>  [>] min/max sequence length: 16/16   # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  # Basic transition rate plot (with adjusted x-axis labels) ggseqtrplot(biofam.seq, x_n.dodge = 2) #>  [>] computing transition probabilities for states 0/1/2/3/4/5/6/7 ...   # Transition rate with group variable (with and without weights) ggseqtrplot(biofam.seq, group=biofam$sex, x_n.dodge = 2) #>  [>] computing transition probabilities for states 0/1/2/3/4/5/6/7 ... #>  [>] computing transition probabilities for states 0/1/2/3/4/5/6/7 ...  ggseqtrplot(biofam.seq, group=biofam$sex, x_n.dodge = 2, weighted = FALSE) #>  [>] computing transition probabilities for states 0/1/2/3/4/5/6/7 ... #>  [>] computing transition probabilities for states 0/1/2/3/4/5/6/7 ..."}]
